{
	"name": "json-processing_icici_Demo",
	"properties": {
		"activities": [
			{
				"name": "Lookup",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy From Source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "json_ds",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Copy From Source",
				"type": "Copy",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "RestSource",
						"httpRequestTimeout": "00:01:40",
						"requestInterval": "00.00:00:00.010",
						"requestMethod": "GET",
						"paginationRules": {
							"supportRFC5988": "true"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "RestResource1",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "json_ds",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Set variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Lookup",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "jsonData",
					"value": {
						"value": "@activity('Lookup').output.value",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Copy to sql",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Set variable",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @json NVARCHAR(MAX);  \nSET @json = N'@{variables('jsondata')}';  \n  \nSELECT   \n    value.id as id,  \n    value.Name as name,  \n    data.Color as color,  \n    COALESCE(data.[capacity], CAST(data.[capacity GB] AS NVARCHAR(50))) as capacity,  \n    data.Price as price  \nFROM OPENJSON(@json)   \nWITH (  \n    id INT,  \n    name NVARCHAR(255),  \n    data NVARCHAR(MAX) AS JSON  \n) AS value  \nOUTER APPLY OPENJSON(value.Data)   \nWITH (  \n    color NVARCHAR(50),  \n    [capacity] NVARCHAR(50),  \n    [capacity GB] INT,  \n    price DECIMAL(10, 2)  \n) AS data;  \n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSqldb",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "AzureSqldb",
						"type": "DatasetReference"
					}
				]
			}
		],
		"variables": {
			"jsonData": {
				"type": "Array"
			}
		},
		"annotations": [],
		"lastPublishTime": "2023-05-02T12:50:41Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}